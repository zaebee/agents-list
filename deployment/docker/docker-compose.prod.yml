# Docker Compose for Production Environment
version: '3.8'

services:
  # Backend service with production optimizations
  backend:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.backend
      target: production
    container_name: ai-crm-backend-prod
    environment:
      - ENV=production
      - DEBUG=false
      - YOUGILE_API_KEY=${YOUGILE_API_KEY}
      - YOUGILE_COMPANY_ID=${YOUGILE_COMPANY_ID}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
    volumes:
      - backend_logs:/app/logs
    networks:
      - ai-crm-network
      - monitoring-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend service with production optimizations
  frontend:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.frontend
      target: production
    container_name: ai-crm-frontend-prod
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL:-/api}
    volumes:
      - frontend_logs:/var/log/nginx
    networks:
      - ai-crm-network
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: ai-crm-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../monitoring/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ../monitoring/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - ai-crm-network
    depends_on:
      - frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # CLI service for background processing
  cli:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.cli
      target: production
    container_name: ai-crm-cli-prod
    environment:
      - ENV=production
      - YOUGILE_API_KEY=${YOUGILE_API_KEY}
      - YOUGILE_COMPANY_ID=${YOUGILE_COMPANY_ID}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    volumes:
      - cli_data:/app/data
      - cli_logs:/app/logs
    networks:
      - ai-crm-network
      - monitoring-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: ["python", "pm_agent_gateway.py"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for production
  redis:
    image: redis:7-alpine
    container_name: ai-crm-redis-prod
    volumes:
      - redis_data:/data
      - ../monitoring/redis-prod.conf:/etc/redis.conf:ro
    networks:
      - ai-crm-network
      - monitoring-network
    restart: unless-stopped
    command: ["redis-server", "/etc/redis.conf", "--requirepass", "${REDIS_PASSWORD}"]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-crm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ai-crm-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ../monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  backend_logs:
  frontend_logs:
  nginx_logs:
  cli_data:
  cli_logs:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ai-crm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16