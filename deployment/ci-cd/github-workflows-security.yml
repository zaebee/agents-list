# Security-focused CI/CD Pipeline
name: Security Scan and Compliance

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan on Mondays at 2 AM
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main, develop ]
    paths:
      - 'our-crm-ai/**'
      - 'web-ui/**'
      - 'deployment/**'

jobs:
  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dockerfile: [backend, frontend, cli]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -f deployment/docker/Dockerfile.${{ matrix.dockerfile }} -t ai-crm-${{ matrix.dockerfile }}:scan .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ai-crm-${{ matrix.dockerfile }}:scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.dockerfile }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.dockerfile }}.sarif'
          category: 'container-${{ matrix.dockerfile }}'

      - name: Run Hadolint Dockerfile linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: deployment/docker/Dockerfile.${{ matrix.dockerfile }}
          format: sarif
          output-file: hadolint-${{ matrix.dockerfile }}.sarif

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint-${{ matrix.dockerfile }}.sarif
          category: 'dockerfile-${{ matrix.dockerfile }}'

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python,javascript"

      - name: Run Semgrep security analysis
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/docker
          generateSarif: "1"

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Safety for Python dependency scanning
        run: pip install safety

      - name: Scan Python dependencies
        run: |
          safety check --json --output safety-backend.json -r web-ui/backend/requirements.txt || true
          safety check --json --output safety-cli.json -r our-crm-ai/requirements.txt || true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Audit Node.js dependencies
        run: |
          cd web-ui/frontend
          npm audit --audit-level moderate --json > npm-audit.json || true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scans
          path: |
            safety-*.json
            web-ui/frontend/npm-audit.json

  # Secrets scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secrets detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure security scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: deployment/
          framework: dockerfile,terraform
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov.sarif
          category: 'infrastructure'

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_dir: 'deployment/terraform'
          policy_type: 'all'
          only_warn: true
          sarif_upload: true

  # Security policy compliance check
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy compliance
        run: |
          echo "Checking security policy compliance..."
          
          # Check for required security files
          files=(".github/SECURITY.md" "deployment/docker/.dockerignore")
          for file in "${files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required security file: $file"
              exit 1
            fi
          done
          
          # Check for hardcoded secrets patterns
          if grep -r -E "(password|secret|key|token).*=" --include="*.py" --include="*.js" --include="*.ts" --exclude-dir=".git" .; then
            echo "❌ Potential hardcoded secrets found"
            exit 1
          fi
          
          echo "✅ Basic compliance checks passed"

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [container-security, sast-scan, dependency-scan, secrets-scan, infrastructure-scan, compliance-check]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v3

      - name: Generate security summary report
        run: |
          echo "# Security Scan Summary Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> security-report.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });