name: AI-CRM Phase 2A CI/CD Pipeline

on:
  push:
    branches: [main, develop, feat/*, fix/*]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/aicrm

jobs:
  # Frontend Tests and Build
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Run tests
      run: npm run test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aicrm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run linting (flake8)
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking (mypy)
      run: |
        pip install mypy
        mypy --ignore-missing-imports *.py || true
    
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aicrm_test
        REDIS_URL: redis://localhost:6379/0
        ANTHROPIC_API_KEY: test_key
        ENVIRONMENT: test
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        IMAGE_TAG: ${{ needs.build-images.outputs.image-tag }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$STAGING_SSH_KEY" > ~/.ssh/staging_key
        chmod 600 ~/.ssh/staging_key
        
        # Deploy to staging server
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/staging_key $STAGING_USER@$STAGING_HOST << EOF
          cd /opt/aicrm-staging
          echo "IMAGE_TAG=$IMAGE_TAG" > .env.staging
          docker compose -f docker-compose.phase2a.yml pull aicrm-app
          docker compose -f docker-compose.phase2a.yml up -d aicrm-app
          docker compose -f docker-compose.phase2a.yml exec -T aicrm-app /app/healthcheck.sh
        EOF
    
    - name: Run staging smoke tests
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
      run: |
        # Wait for deployment
        sleep 30
        
        # Health check
        curl -f "$STAGING_URL/health" || exit 1
        
        # API test
        curl -f "$STAGING_URL/api/health" || exit 1
        
        # Pricing endpoint test
        curl -f "$STAGING_URL/api/billing/pricing" || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
        IMAGE_TAG: ${{ needs.build-images.outputs.image-tag }}
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        STRIPE_SECRET_KEY: ${{ secrets.PROD_STRIPE_SECRET_KEY }}
        JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET_KEY }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$PROD_SSH_KEY" > ~/.ssh/prod_key
        chmod 600 ~/.ssh/prod_key
        
        # Deploy to production server
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/prod_key $PROD_USER@$PROD_HOST << EOF
          cd /opt/aicrm-production
          
          # Backup current deployment
          ./scripts/backup.sh
          
          # Update environment
          echo "IMAGE_TAG=$IMAGE_TAG" > .env.prod
          echo "DATABASE_URL=$DATABASE_URL" >> .env.prod
          echo "STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY" >> .env.prod
          echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> .env.prod
          
          # Deploy with zero-downtime
          docker compose -f docker-compose.phase2a.yml pull aicrm-app
          docker compose -f docker-compose.phase2a.yml up -d aicrm-app --no-deps
          
          # Health check
          sleep 30
          docker compose -f docker-compose.phase2a.yml exec -T aicrm-app /app/healthcheck.sh
          
          # Run database migrations if needed
          docker compose -f docker-compose.phase2a.yml exec -T aicrm-app python database_migrations.py
        EOF
    
    - name: Run production smoke tests
      env:
        PROD_URL: ${{ secrets.PROD_URL }}
      run: |
        # Wait for deployment
        sleep 60
        
        # Comprehensive health checks
        curl -f "$PROD_URL/health" || exit 1
        curl -f "$PROD_URL/api/health" || exit 1
        curl -f "$PROD_URL/api/billing/pricing" || exit 1
        
        # Test AI agent availability
        curl -X POST "$PROD_URL/api/agents" \
          -H "Content-Type: application/json" \
          -d '{"command":"list available agents"}' || exit 1

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          AI-CRM Phase 2A Deployment Status: ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}

  # Performance Testing (Optional)
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js for k6
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
      run: |
        k6 run --vus 10 --duration 30s --env BASE_URL=$STAGING_URL tests/performance/load-test.js