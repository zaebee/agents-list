FROM python:3.11-slim

# Set environment variables for development
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV AI_CRM_DEV_MODE=true
ENV AI_CRM_DEBUG=true

# Install system dependencies for development
RUN apt-get update && apt-get install -y \
    gcc \
    python3-dev \
    libpq-dev \
    curl \
    git \
    vim \
    htop \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory
WORKDIR /app

# Install Python dependencies
# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Install development-specific packages
RUN pip install --no-cache-dir \
    ipython \
    ipdb \
    watchdog \
    flask-debugtoolbar

# Create directories for development
RUN mkdir -p /app/logs /app/data /app/workflow_storage

# Create non-root user for development (with sudo capabilities)
RUN useradd --create-home --shell /bin/bash --uid 1000 devuser && \
    chown -R devuser:devuser /app

# Copy application code (will be overridden by volume mount in docker-compose)
COPY . /app/

# Switch to development user
USER devuser

# Expose development port
EXPOSE 8000

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD python3 -c "import requests; requests.get('http://localhost:8000/health', timeout=5)" || exit 1

# Default command for development (can be overridden)
CMD ["python3", "-c", "print('ðŸš€ AI-CRM Development Container Ready!'); import time; time.sleep(3600)"]