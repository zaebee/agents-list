# AI Project Manager - Production Docker Compose
# Complete production environment with PostgreSQL, Redis, and monitoring

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aipm_postgres
    environment:
      POSTGRES_DB: aipm_db
      POSTGRES_USER: aipm_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-aipm_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - aipm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aipm_user -d aipm_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: aipm_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aipm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Project Manager Application
  aipm_app:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: aipm_application
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://aipm_user:${DATABASE_PASSWORD:-aipm_secure_password}@postgres:5432/aipm_db
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: aipm_user
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-aipm_secure_password}
      DATABASE_NAME: aipm_db
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      
      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-change-this-in-production}
      PORT: 5001
      
      # Security Configuration
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://yourdomain.com}
      
      # AI Agent Configuration
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Monitoring
      ENABLE_METRICS: "true"
      LOG_LEVEL: INFO
      
      # Performance
      GUNICORN_WORKERS: 4
      GUNICORN_THREADS: 2
      GUNICORN_TIMEOUT: 60
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "5001:5001"
    networks:
      - aipm_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aipm_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - aipm_network
    depends_on:
      - aipm_app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: aipm_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - aipm_network
    restart: unless-stopped

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aipm_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - aipm_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: aipm_loki
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - aipm_network
    restart: unless-stopped

  # Log Collection with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: aipm_promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/aipm:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - aipm_network
    depends_on:
      - loki
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: aipm_backup
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD:-aipm_secure_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      sh -c "
      echo '0 2 * * * /backup.sh' | crontab -
      crond -f
      "
    networks:
      - aipm_network
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  aipm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
