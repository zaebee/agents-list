Metadata-Version: 2.4
Name: ai-crm
Version: 2.0.0
Summary: AI-Powered CRM & Project Management System
Author-email: AI-CRM Team <team@ai-crm.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/zaebee/ai-crm
Project-URL: Repository, https://github.com/zaebee/ai-crm
Project-URL: Documentation, https://github.com/zaebee/ai-crm/blob/main/README.md
Project-URL: Issues, https://github.com/zaebee/ai-crm/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.104.1
Requires-Dist: uvicorn>=0.24.0
Requires-Dist: sqlalchemy>=2.0.23
Requires-Dist: psycopg2-binary>=2.9.7
Requires-Dist: pydantic>=2.5.0
Requires-Dist: python-jose>=3.3.0
Requires-Dist: passlib>=1.7.4
Requires-Dist: python-multipart>=0.0.6
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: httpx>=0.28.1
Requires-Dist: aiofiles>=24.1.0
Requires-Dist: redis>=4.6.0
Requires-Dist: anthropic>=0.64.0
Requires-Dist: openai>=1.99.9
Requires-Dist: email-validator>=2.0.0
Requires-Dist: stripe>=6.0.0
Requires-Dist: bcrypt>=4.0.0
Requires-Dist: PyJWT>=2.8.0
Provides-Extra: dev
Requires-Dist: ruff>=0.1.8; extra == "dev"
Requires-Dist: mypy>=1.1.0; extra == "dev"
Requires-Dist: black>=23.1.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: pytest>=7.2.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.1.0; extra == "dev"
Requires-Dist: ipython>=8.10.0; extra == "dev"

# AI-Powered CRM & Project Management System

This project is a sophisticated, AI-powered system for managing tasks and projects. It combines a powerful command-line interface (CLI) with a modern web-based user interface (UI) to provide a comprehensive solution for individuals and teams. The system is built on a multi-agent architecture, leveraging a suite of specialized AI agents to automate and streamline project management workflows.

## üöÄ Key Features

- **Modern Web UI**: A responsive and intuitive web interface built with React and TypeScript, providing a visual way to manage tasks, interact with agents, and monitor project progress.
- **Enterprise Authentication**: Comprehensive JWT-based authentication system with user registration, secure login, session management, and role-based access control.
- **Subscription Management**: Tiered pricing model (Free, Pro, Enterprise) with feature gating, usage tracking, and Stripe integration for billing.
- **Intelligent Task Management**: The system analyzes task descriptions to automatically suggest the most suitable AI agent for the job, streamlining task assignment and ensuring expertise is matched to the task.
- **Advanced PM Agent Gateway**: For complex projects, a dedicated Project Manager agent can analyze high-level goals, decompose them into actionable subtasks, and create a comprehensive execution plan with dependencies.
- **Multi-Agent Collaboration**: The architecture supports seamless collaboration between specialized agents, allowing for complex workflows that mimic a real-world development team.
- **Analytics Dashboard**: Real-time analytics with system health monitoring, task completion tracking, and performance metrics visualization.
- **Full CRUD Operations**: Comprehensive task management capabilities, including creating, reading, updating, and deleting tasks, as well as commenting and moving tasks between columns.
- **PostgreSQL Database Integration**: Uses PostgreSQL as a robust backend for project management and authentication, ensuring that all tasks and project data are stored in a secure, centralized database system.
- **Production-Ready Security**: Features secure Argon2 password hashing, input validation, audit logging, rate limiting, and OWASP-compliant security measures.

## üèõÔ∏è Architecture Overview

The system is composed of three main layers:

1.  **Frontend (Web UI)**: A React application (in the `frontend` directory) that provides the user interface for interacting with the system. It communicates with the backend via a RESTful API.
2.  **Backend (FastAPI)**: A Python-based backend powered by FastAPI that serves the API, handles business logic, and orchestrates the AI agents.
3.  **AI Agent Core**: A collection of specialized AI agents (defined in the `agents` directory) that perform various tasks, from code generation to documentation and security analysis.

```mermaid
graph TD
    subgraph "User Interfaces"
        A[Web UI (React)]
        B[CLI (crm_enhanced.py)]
    end

    subgraph "Backend Services"
        C[API Server (FastAPI)]
        D[Authentication Service]
        E[Agent Selector]
        F[PM Agent Gateway]
        G[Billing Service]
        H[Analytics Engine]
    end

    subgraph "AI Agents"
        I[Specialized Agents]
        J[Context Manager]
    end

    subgraph "Data & Integration"
        K[PostgreSQL Database]
        L[Authentication System]
        M[Stripe API]
    end

    A --> C
    B --> C
    C --> D
    C --> E
    C --> F
    C --> G
    C --> H
    E --> I
    F --> I
    I --> J
    C --> K
    C --> L
    G --> M
```

## üõ†Ô∏è Setup and Installation

### Prerequisites

- Python 3.11+
- Node.js 18+ and npm/bun
- Docker and Docker Compose
- PostgreSQL 15+ (or SQLite for development)
- AI API keys (Anthropic Claude recommended)

### Environment Setup

1.  **Environment Configuration**: Copy and configure the environment file.
    ```bash
    cp .env.docker .env
    # Edit .env with your specific configuration
    ```

2.  **Database Setup**: Configure PostgreSQL or SQLite database.
    ```bash
    # For PostgreSQL (recommended for production)
    export DATABASE_URL="postgresql://aicrm_user:password@localhost:5432/aicrm_db"
    
    # For SQLite (development only)
    export DATABASE_URL="sqlite:///./ai_crm.db"
    
    # Generate a secure secret key for JWT tokens
    export SECRET_KEY="your_secure_secret_key_here"
    ```

3.  **AI API Keys**: Configure AI provider API keys.
    ```bash
    export ANTHROPIC_API_KEY="your_anthropic_api_key"
    export OPENAI_API_KEY="your_openai_api_key"  # Optional
    export MISTRAL_API_KEY="your_mistral_api_key"  # Optional
    ```

4.  **Billing Setup (Optional)**: For subscription features, configure Stripe.
    ```bash
    export STRIPE_SECRET_KEY="your_stripe_secret_key"
    export STRIPE_PUBLISHABLE_KEY="your_stripe_publishable_key"
    ```

### Development Setup

1.  **Backend Dependencies**: Install the required Python libraries.
    ```bash
    pip install -r requirements.txt
    pip install -r requirements-dev.txt  # For development tools
    ```

2.  **Database Initialization**: Set up database tables and admin user.
    ```bash
    # Initialize database with admin user (admin/admin123)
    python -c "
    from auth_database import create_tables, seed_default_data, SessionLocal
    create_tables()
    db = SessionLocal()
    try:
        seed_default_data(db)
    finally:
        db.close()
    "
    ```

3.  **Frontend Dependencies**: Install the required Node.js packages.
    ```bash
    cd frontend
    npm install  # or bun install
    ```


### Initial Project Setup

The system is now fully integrated with PostgreSQL for robust data management. No external project management platform setup is required - everything runs locally with your own database.

## üèÉ Development

To run the application in development mode, use the provided shell script. This will start the backend server with hot-reloading enabled.

```bash
./start-dev.sh
```

-   **Web UI**: You will need to start the frontend separately.
    ```bash
    cd frontend
    npm start
    ```
-   **Backend API**: The API will be available at `http://localhost:5001`.
-   **API Docs**: Interactive API documentation (Swagger UI) can be found at `http://localhost:5001/docs`.

> **Note**: Development server runs on port **5001**, while Docker deployment uses port **8080**.

### Authentication Usage

The system now includes a comprehensive authentication system. Here are the key endpoints:

#### User Registration
```bash
curl -X POST "http://localhost:5001/api/auth/register" \
     -H "Content-Type: application/json" \
     -d '{
       "username": "newuser",
       "email": "user@example.com",
       "password": "securepassword123",
       "full_name": "New User"
     }'
```

#### User Login
```bash
curl -X POST "http://localhost:5001/api/auth/login" \
     -H "Content-Type: application/json" \
     -d '{
       "username": "newuser",
       "password": "securepassword123"
     }'
```

#### Using Protected Endpoints
```bash
# Use the access_token from login response
curl -X GET "http://localhost:5001/api/auth/me" \
     -H "Authorization: Bearer YOUR_ACCESS_TOKEN"
```

> **Note**: Replace `localhost:5001` with `localhost:8080` when using Docker deployment.

### Subscription Tiers

- **Free Tier**: 10 command executions/month, 9 Haiku agents
- **Pro Tier ($49/month)**: Unlimited commands, 46 agents, analytics dashboard
- **Enterprise Tier ($299/month)**: All 59 agents, custom features, priority support

## üõ†Ô∏è Docker Deployment

For production deployment, use Docker Compose:

```bash
# Build and start all services
docker-compose -f docker-compose.phase2a.yml up --build

# Run in background
docker-compose -f docker-compose.phase2a.yml up -d

# Check logs
docker-compose -f docker-compose.phase2a.yml logs -f

# Stop services
docker-compose -f docker-compose.phase2a.yml down
```

The system will be available at:
- **API**: http://localhost:5001
- **Frontend**: http://localhost:3000
- **API Documentation**: http://localhost:5001/docs

##  CLI Usage

The `crm_enhanced.py` script provides a powerful command-line interface for interacting with the system.

### Create a Task
```bash
python3 crm_enhanced.py create --title "<task_title>" --description "<task_description>" [--owner <agent_name>]
```

### Analyze a Task with the PM Agent
```bash
python3 crm_enhanced.py pm --title "<task_title>" --description "<task_description>"
```

### Other Commands
For a full list of commands and their options, you can use the `--help` flag.
```bash
python3 crm_enhanced.py --help
python3 crm_enhanced.py create --help
```

## üìö Documentation

For more detailed information about the system, please refer to the main documentation in the `docs` directory:

-   **`docs/AGENT_GUIDE.md`**: A comprehensive guide to all the available AI agents and their specializations.
-   **`docs/DEPLOYMENT_GUIDE.md`**: Instructions for deploying the application to production environments.
-   **`docs/WEB_UI_GUIDE.md`**: A guide to using the web-based user interface.
