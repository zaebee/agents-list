[build-system]
requires = ["setuptools>=77.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-crm"
version = "2.0.0"
description = "AI-Powered CRM & Project Management System"
authors = [
    {name = "AI-CRM Team", email = "team@ai-crm.com"}
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "sqlalchemy>=2.0.23",
    "psycopg2-binary>=2.9.7",
    "pydantic>=2.5.0",
    "python-jose>=3.3.0",
    "passlib>=1.7.4",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "httpx>=0.28.1",
    "aiofiles>=24.1.0",
    "redis>=4.6.0",
    "anthropic>=0.64.0",
    "openai>=1.99.9",
    "email-validator>=2.0.0",
    "stripe>=6.0.0",
    "bcrypt>=4.0.0",
    "PyJWT>=2.8.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.8",
    "mypy>=1.1.0",
    "black>=23.1.0",
    "isort>=5.12.0",
    "pytest>=7.2.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.1.0",
    "ipython>=8.10.0",
]

[project.urls]
Homepage = "https://github.com/zaebee/ai-crm"
Repository = "https://github.com/zaebee/ai-crm"
Documentation = "https://github.com/zaebee/ai-crm/blob/main/README.md"
Issues = "https://github.com/zaebee/ai-crm/issues"

# Package discovery and build configuration
[tool.setuptools]
py-modules = [
    "api",
    "auth",
    "auth_database", 
    "auth_routes",
    "billing_api",
    "crm_service",
    "dashboard_api",
    "models"
]

[tool.setuptools.packages.find]
exclude = [
    "frontend*",
    "node_modules*", 
    "backups*",
    "logs*",
    "data*",
    "nginx*",
    "terraform*",
    "monitoring*",
    "workflow_storage*",
    "venv*",
    "__pycache__*",
    "*.egg-info*"
]

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py311"
line-length = 88

exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "migrations",
    "venv",
    "node_modules",
    "frontend",
    "backups",
    "logs",
    "data",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "ARG002",  # unused method argument
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"test_*.py" = ["ARG", "PLR2004", "S101"]
"tests/*.py" = ["ARG", "PLR2004", "S101"]
"scripts/*.py" = ["T201"]  # allow print statements in scripts

[tool.ruff.lint.isort]
known-first-party = ["auth_database", "auth", "api", "crm_service"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 10

# Black configuration for code formatting
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | frontend
  | node_modules
  | backups
  | logs
  | data
)/
'''

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # gradually enable this
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # gradually enable this
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "openai.*",
    "redis.*",
    "jose.*",
    "passlib.*",
    "sqlalchemy.*",
    "fastapi.*",
    "uvicorn.*",
    "psycopg2.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests", "."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*_test.py",
    "*/venv/*",
    "*/node_modules/*",
    "*/frontend/*",
    "*/backups/*",
    "*/logs/*",
    "*/data/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
    "except ImportError:",
]
show_missing = true
skip_covered = false
precision = 2

# isort configuration for import sorting
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["auth_database", "auth", "api", "crm_service"]
known_third_party = ["fastapi", "sqlalchemy", "pydantic", "uvicorn"]
skip_glob = ["*/migrations/*", "*/frontend/*", "*/node_modules/*"]