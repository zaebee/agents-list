services:
  # Main AI-CRM Application  
  aicrm-app:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: aicrm_app
    env_file:
      - .env.docker
    environment:
      # Override specific settings for Docker deployment
      - DATABASE_URL=postgresql://aicrm_user:${DATABASE_PASSWORD:-aicrm123}@postgres:5432/aicrm_db
      - REDIS_URL=redis://redis:6379/0
      - HOST=0.0.0.0
      - PORT=5001
      - DATABASE_URL=postgresql://aicrm_user:${DATABASE_PASSWORD:-your_secure_password}@postgres:5432/aicrm_db
      - DEBUG=false
      - LOG_LEVEL=INFO
      - WORKERS=4
      - TIMEOUT=60
      
      # Feature Flags
      - ENABLE_ANALYTICS=true
      - ENABLE_MONITORING=true
      - MAX_TASKS_PER_USER=1000
      
    ports:
      - "8080:80"
      - "4433:443"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./nginx/nginx.phase2a.conf:/etc/nginx/sites-available/aicrm  # Mount the Nginx config file
    restart: unless-stopped
    networks:
      - aicrm_network
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aicrm_postgres
    environment:
      - POSTGRES_DB=aicrm_db
      - POSTGRES_USER=aicrm_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-aicrm123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - aicrm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aicrm_user -d aicrm_db"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: aicrm_redis
    command: |
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1 
      --save 300 10 
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aicrm_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: aicrm_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - aicrm_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:10.0.0
    container_name: aicrm_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - aicrm_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: aicrm_backup
    environment:
      - POSTGRES_DB=aicrm_db
      - POSTGRES_USER=aicrm_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-aicrm123}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      sh -c '
        echo "Setting up backup cron job..."
        echo "${BACKUP_SCHEDULE} /backup.sh" > /etc/crontabs/root
        crond -f
      '
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - aicrm_network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
    name: aicrm_postgres_data
  redis_data:
    driver: local
    name: aicrm_redis_data
  prometheus_data:
    driver: local
    name: aicrm_prometheus_data
  grafana_data:
    driver: local
    name: aicrm_grafana_data

networks:
  aicrm_network:
    driver: bridge
    name: aicrm_network
